/**
 * ProfileTab ÁªÑ‰ª∂ÊµãËØï
 * Sprint 14 - Phase 2 üî¥ RED
 *
 * ÊµãËØï‰∏™‰∫∫‰ø°ÊÅØÊ†áÁ≠æÈ°µÁªÑ‰ª∂Ôºö
 * - Âü∫Êú¨‰ø°ÊÅØË°®ÂçïÊ∏≤Êüì
 * - Áî®Êà∑Êï∞ÊçÆÂä†ËΩΩ
 * - Ë°®ÂçïÈ™åËØÅ
 * - Ë°®ÂçïÊèê‰∫§
 * - Â§¥ÂÉè‰∏ä‰º†
 */

import { render, screen, fireEvent, waitFor } from '@testing-library/react'
import userEvent from '@testing-library/user-event'
import { ProfileTab } from '@/components/settings/ProfileTab'
import type { UserProfile } from '@/types/user'

// Mock React Query
jest.mock('@tanstack/react-query', () => ({
  useQuery: jest.fn(),
  useMutation: jest.fn(),
  useQueryClient: jest.fn(),
}))

const { useQuery, useMutation } = require('@tanstack/react-query')

describe('ProfileTab', () => {
  const mockUserProfile: UserProfile = {
    id: 'user-123',
    email: 'test@example.com',
    nickname: 'Test User',
    avatar: 'https://example.com/avatar.jpg',
    bio: 'Test bio',
    createdAt: '2025-01-01T00:00:00Z',
    updatedAt: '2025-10-06T00:00:00Z',
  }

  beforeEach(() => {
    jest.clearAllMocks()

    // Mock successful query
    useQuery.mockReturnValue({
      data: mockUserProfile,
      isLoading: false,
      isError: false,
      error: null,
    })

    // Mock mutation
    useMutation.mockReturnValue({
      mutate: jest.fn(),
      isLoading: false,
      isError: false,
    })
  })

  describe('Êï∞ÊçÆÂä†ËΩΩ', () => {
    it('Âä†ËΩΩÊó∂Â∫îËØ•ÊòæÁ§∫È™®Êû∂Â±è', () => {
      useQuery.mockReturnValue({
        data: null,
        isLoading: true,
        isError: false,
      })

      render(<ProfileTab />)

      expect(screen.getByTestId('profile-skeleton')).toBeInTheDocument()
    })

    it('Âä†ËΩΩÊàêÂäüÂ∫îËØ•ÊòæÁ§∫Áî®Êà∑‰ø°ÊÅØ', () => {
      render(<ProfileTab />)

      expect(screen.getByDisplayValue('Test User')).toBeInTheDocument()
      expect(screen.getByDisplayValue('test@example.com')).toBeInTheDocument()
      expect(screen.getByDisplayValue('Test bio')).toBeInTheDocument()
    })

    it('Âä†ËΩΩÂ§±Ë¥•Â∫îËØ•ÊòæÁ§∫ÈîôËØØÊèêÁ§∫', () => {
      useQuery.mockReturnValue({
        data: null,
        isLoading: false,
        isError: true,
        error: new Error('Failed to load profile'),
      })

      render(<ProfileTab />)

      expect(screen.getByText(/Âä†ËΩΩÂ§±Ë¥•/)).toBeInTheDocument()
    })
  })

  describe('Âü∫Êú¨‰ø°ÊÅØË°®Âçï', () => {
    it('Â∫îËØ•Ê∏≤ÊüìÊâÄÊúâË°®ÂçïÂ≠óÊÆµ', () => {
      render(<ProfileTab />)

      expect(screen.getByLabelText(/ÊòµÁß∞/)).toBeInTheDocument()
      expect(screen.getByLabelText(/ÈÇÆÁÆ±/)).toBeInTheDocument()
      expect(screen.getByLabelText(/‰∏™‰∫∫ÁÆÄ‰ªã/)).toBeInTheDocument()
      expect(screen.getByRole('button', { name: /‰øùÂ≠ò/i })).toBeInTheDocument()
    })

    it('ÈÇÆÁÆ±Â≠óÊÆµÂ∫îËØ•ÊòØÁ¶ÅÁî®Áä∂ÊÄÅ', () => {
      render(<ProfileTab />)

      const emailInput = screen.getByDisplayValue('test@example.com')
      expect(emailInput).toBeDisabled()
    })

    it('Â∫îËØ•ÊòæÁ§∫Â§¥ÂÉè', () => {
      render(<ProfileTab />)

      const avatar = screen.getByTestId('user-avatar')
      expect(avatar).toBeInTheDocument()
    })
  })

  describe('Ë°®ÂçïÈ™åËØÅ', () => {
    it('Â∫îËØ•È™åËØÅÊòµÁß∞ÈïøÂ∫¶Ôºà1-50Â≠óÁ¨¶Ôºâ', async () => {
      const user = userEvent.setup()
      render(<ProfileTab />)

      const nicknameInput = screen.getByLabelText(/ÊòµÁß∞/)

      // Ê∏ÖÁ©∫ÊòµÁß∞ÔºàÊó†ÊïàÔºâ
      await user.clear(nicknameInput)
      await user.tab()

      await waitFor(() => {
        expect(screen.getByText(/ÊòµÁß∞Ëá≥Â∞ëÈúÄË¶Å1‰∏™Â≠óÁ¨¶/)).toBeInTheDocument()
      })

      // ËæìÂÖ•Ë∂ÖÈïøÊòµÁß∞ÔºàÊó†ÊïàÔºâ
      await user.type(nicknameInput, 'a'.repeat(51))
      await user.tab()

      await waitFor(() => {
        expect(screen.getByText(/ÊòµÁß∞ÊúÄÂ§ö50‰∏™Â≠óÁ¨¶/)).toBeInTheDocument()
      })
    })

    it('Â∫îËØ•È™åËØÅ‰∏™‰∫∫ÁÆÄ‰ªãÈïøÂ∫¶ÔºàÊúÄÂ§ö500Â≠óÁ¨¶Ôºâ', async () => {
      const user = userEvent.setup()
      render(<ProfileTab />)

      const bioInput = screen.getByLabelText(/‰∏™‰∫∫ÁÆÄ‰ªã/)

      // ËæìÂÖ•Ë∂ÖÈïøÁÆÄ‰ªãÔºàÊó†ÊïàÔºâ
      await user.clear(bioInput)
      await user.type(bioInput, 'a'.repeat(501))
      await user.tab()

      await waitFor(() => {
        expect(screen.getByText(/‰∏™‰∫∫ÁÆÄ‰ªãÊúÄÂ§ö500‰∏™Â≠óÁ¨¶/)).toBeInTheDocument()
      })
    })

    it('ÊúâÈ™åËØÅÈîôËØØÊó∂‰øùÂ≠òÊåâÈíÆÂ∫îËØ•Á¶ÅÁî®', async () => {
      const user = userEvent.setup()
      render(<ProfileTab />)

      const nicknameInput = screen.getByLabelText(/ÊòµÁß∞/)
      const saveButton = screen.getByRole('button', { name: /‰øùÂ≠ò/i })

      // Ê∏ÖÁ©∫ÊòµÁß∞
      await user.clear(nicknameInput)
      await user.tab()

      await waitFor(() => {
        expect(saveButton).toBeDisabled()
      })
    })
  })

  describe('Ë°®ÂçïÊèê‰∫§', () => {
    it('Êèê‰∫§ÊàêÂäüÂ∫îËØ•ÊòæÁ§∫ÊàêÂäüÊèêÁ§∫', async () => {
      const mockMutate = jest.fn()
      useMutation.mockReturnValue({
        mutate: mockMutate,
        isLoading: false,
        isSuccess: true,
      })

      const user = userEvent.setup()
      render(<ProfileTab />)

      const nicknameInput = screen.getByLabelText(/ÊòµÁß∞/)
      const saveButton = screen.getByRole('button', { name: /‰øùÂ≠ò/i })

      // ‰øÆÊîπÊòµÁß∞
      await user.clear(nicknameInput)
      await user.type(nicknameInput, 'Updated Name')

      // Êèê‰∫§Ë°®Âçï
      await user.click(saveButton)

      await waitFor(() => {
        expect(mockMutate).toHaveBeenCalledWith({
          nickname: 'Updated Name',
          bio: 'Test bio',
        })
      })
    })

    it('Êèê‰∫§Â§±Ë¥•Â∫îËØ•ÊòæÁ§∫ÈîôËØØÊèêÁ§∫', async () => {
      useMutation.mockReturnValue({
        mutate: jest.fn(),
        isLoading: false,
        isError: true,
        error: new Error('Update failed'),
      })

      render(<ProfileTab />)

      expect(screen.getByText(/Êõ¥Êñ∞Â§±Ë¥•/)).toBeInTheDocument()
    })

    it('Êèê‰∫§Êó∂Â∫îËØ•Á¶ÅÁî®Ë°®Âçï', () => {
      useMutation.mockReturnValue({
        mutate: jest.fn(),
        isLoading: true,
      })

      render(<ProfileTab />)

      const saveButton = screen.getByRole('button', { name: /‰øùÂ≠ò‰∏≠/i })
      expect(saveButton).toBeDisabled()
    })
  })
})
