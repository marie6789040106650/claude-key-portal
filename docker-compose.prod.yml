# Docker Compose - Production Environment
# 用于生产环境部署（自托管）

version: '3.8'

services:
  # PostgreSQL 数据库（生产环境）
  postgres:
    image: postgres:15-alpine
    container_name: claude-portal-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-claude_portal}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - '5432:5432'
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./backups:/backups # 备份目录
    networks:
      - claude-portal-network
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER:-postgres}']
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

  # Redis 缓存（生产环境）
  redis:
    image: redis:7-alpine
    container_name: claude-portal-redis-prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    ports:
      - '6379:6379'
    volumes:
      - redis_prod_data:/data
    networks:
      - claude-portal-network
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

  # Next.js 应用（生产环境）
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
    container_name: claude-portal-app-prod
    ports:
      - '3000:3000'
    environment:
      # 数据库配置（优先使用远程 Supabase）
      DATABASE_URL: ${DATABASE_URL}

      # Redis 配置（优先使用远程 Upstash）
      REDIS_URL: ${REDIS_URL}

      # CRS 配置
      CRS_BASE_URL: ${CRS_BASE_URL:-https://claude.just-play.fun}
      CRS_ADMIN_USERNAME: ${CRS_ADMIN_USERNAME}
      CRS_ADMIN_PASSWORD: ${CRS_ADMIN_PASSWORD}

      # JWT 配置
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-24h}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      NEXTAUTH_URL: ${NEXTAUTH_URL}

      # R2 存储配置
      R2_BUCKET_NAME: ${R2_BUCKET_NAME}
      R2_ACCESS_KEY_ID: ${R2_ACCESS_KEY_ID}
      R2_SECRET_ACCESS_KEY: ${R2_SECRET_ACCESS_KEY}
      R2_ENDPOINT: ${R2_ENDPOINT}
      R2_ACCOUNT_ID: ${R2_ACCOUNT_ID}

      # 应用配置
      NODE_ENV: production
      NEXT_PUBLIC_DOMAIN: ${NEXT_PUBLIC_DOMAIN}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - claude-portal-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1',
        ]
      interval: 30s
      timeout: 10s
      start_period: 40s
      retries: 3
    logging:
      driver: 'json-file'
      options:
        max-size: '50m'
        max-file: '5'

  # Nginx 反向代理（可选）
  nginx:
    image: nginx:alpine
    container_name: claude-portal-nginx-prod
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
    depends_on:
      - app
    networks:
      - claude-portal-network
    restart: unless-stopped
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

networks:
  claude-portal-network:
    driver: bridge

volumes:
  postgres_prod_data:
    driver: local
  redis_prod_data:
    driver: local
  nginx_cache:
    driver: local
